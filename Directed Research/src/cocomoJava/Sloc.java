
package cocomoJava;

import java.awt.Color;
import javax.swing.JOptionPane;

/**
 * This class implements the input SLOC factor COCOMO 2 model is calibrated for
 * SLOC above 2000, hence SLOCInput is larger than 2000
 *
 * @author preethijprabhu
 * @version 1.0.0.0
 */
public class Sloc extends javax.swing.JDialog {

    private CocomoDashboard cocoDash;
    
    /* Modification 2017.2
     * Coding language multiplier for calculating SLOC with function points
     */
    
    final int[] langMult = {38, //Access 
                            71, //Ada 83
                            49, //Ada 95
                            49, //AI Shell
                            32, //APL
                            320, //Assembly - Basic
                            213, //Assembly - Macro
                            64, //Basic - ANSI
                            91, //Basic - Compiled
                            32, //Basic - Visual
                            128, //C
                            55, //C++
                            91, //Cobol(ANSI85)
                            40, //Database - Default
                            4, //Fifth Generation Language
                            320, //First Generation Language
                            64, //Forth
                            107, //Fortran 77
                            71, //Fortran 95
                            20, //Fourth Generation Language
                            64, //High Level Language
                            15, //HTML 3.0
                            53, //Java
                            107, //Jovial
                            64, //Lisp
                            640, //Machine Code
                            80, //Modula 2
                            91, //Pascal
                            27, //PERL
                            16, //PowerBuilder
                            64, //Prolog
                            13, //Query - Default
                            80, //Report Generator
                            107, //Second Generation Language
                            46, //Simulation - Default
                            6, //Spreadsheet
                            80, //Third Generation Language
                            107, //Unix Shell Scripts
                            29, //Visual Basic 5.0
                            34}; //Visual C++

    /**
     * Creates new form NewJDialog
     */
    public Sloc(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.cocoDash = (CocomoDashboard) parent;
        this.getContentPane().setBackground(Color.white);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        mSloc = new javax.swing.JTextField();
        adaptedSloc = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        pDM = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        pCM = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        pIM = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        unfmComboBox = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        suComboBox = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        aaComboBox = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        mSlocBtn = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        pAT = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        langComb = new javax.swing.JComboBox<>();
        multipLabel = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        inpL = new javax.swing.JTextField();
        outL = new javax.swing.JTextField();
        filL = new javax.swing.JTextField();
        intL = new javax.swing.JTextField();
        queL = new javax.swing.JTextField();
        inpA = new javax.swing.JTextField();
        outA = new javax.swing.JTextField();
        filA = new javax.swing.JTextField();
        intA = new javax.swing.JTextField();
        queA = new javax.swing.JTextField();
        inpH = new javax.swing.JTextField();
        outH = new javax.swing.JTextField();
        filH = new javax.swing.JTextField();
        intH = new javax.swing.JTextField();
        queH = new javax.swing.JTextField();
        funcPointsBtn = new javax.swing.JButton();
        jLabel25 = new javax.swing.JLabel();
        manualMultpInput = new javax.swing.JTextField();
        modifyMultpBtn = new javax.swing.JButton();
        jLabel26 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("SLOC");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 15)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("New Code SLOC");

        mSloc.setBackground(new java.awt.Color(204, 204, 204));
        mSloc.setFont(new java.awt.Font("Lucida Grande", 1, 15)); // NOI18N
        mSloc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        mSloc.setText("0");
        mSloc.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        adaptedSloc.setBackground(new java.awt.Color(204, 204, 204));
        adaptedSloc.setFont(new java.awt.Font("Lucida Grande", 1, 15)); // NOI18N
        adaptedSloc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        adaptedSloc.setText("0");
        adaptedSloc.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 15)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Adapted Code SLOC");

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 1, 15)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("DM");

        pDM.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        pDM.setText("0");

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel4.setText("%");

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 1, 15)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("CM");

        pCM.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        pCM.setText("0");

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel6.setText("%");

        jLabel7.setFont(new java.awt.Font("Lucida Grande", 1, 15)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("IM");

        pIM.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        pIM.setText("0");

        jLabel8.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel8.setText("%");

        unfmComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0.0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0" }));

        jLabel10.setFont(new java.awt.Font("Lucida Grande", 1, 15)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("UNFM");

        suComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NOM", "VLOW", "LOW", "HIGH", "VHIGH" }));

        jLabel11.setFont(new java.awt.Font("Lucida Grande", 1, 15)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("SU");

        aaComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));

        jLabel9.setFont(new java.awt.Font("Lucida Grande", 1, 15)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("AA");

        mSlocBtn.setBackground(new java.awt.Color(102, 255, 102));
        mSlocBtn.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        mSlocBtn.setText("OK");
        mSlocBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mSlocBtnActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Lucida Grande", 1, 15)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("AT");

        pAT.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        pAT.setText("0");

        jLabel13.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel13.setText("%");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pDM, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addGap(35, 35, 35)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pCM, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addGap(42, 42, 42)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pIM, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10))
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(0, 44, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mSloc, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(adaptedSloc, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(72, 72, 72))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(146, 146, 146)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(suComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(pAT, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel13))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(aaComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(unfmComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(176, 176, 176))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(178, 178, 178)
                        .addComponent(mSlocBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mSloc, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(adaptedSloc, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(pDM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(pCM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(pIM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aaComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(suComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(unfmComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(pAT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel13)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addComponent(mSlocBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );

        jTabbedPane2.addTab("SLOC", jPanel1);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel15.setFont(new java.awt.Font("Lucida Grande", 1, 15)); // NOI18N
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("Language");

        langComb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Access", "Ada 83", "Ada 95", "AI Shell", "APL", "Assembly - Basic", "Assembly - Macro", "Basic - ANSI", "Basic - Compiled", "Basic - Visual", "C", "C++", "Cobol (ANSI 85)", "Database – Default", "Fifth Generation Language", "First Generation Language", "Forth", "Fortran 77", "Fortran 95", "Fourth Generation Language", "High Level Language", "HTML 3.0", "Java", "Jovial", "Lisp", "Machine Code", "Modula 2", "Pascal", "PERL", "PowerBuilder", "Prolog", "Query – Default", "Report Generator", "Second Generation Language", "Simulation – Default", "Spreadsheet", "Third Generation Language", "Unix Shell Scripts", "Visual Basic 5.0", "Visual C++" }));
        langComb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                langCombActionPerformed(evt);
            }
        });

        multipLabel.setText("38");

        jLabel16.setText("Function Type");

        jLabel17.setText("Low");

        jLabel18.setText("Average");

        jLabel19.setText("High");

        jLabel20.setText("Inputs");

        jLabel21.setText("Outputs");

        jLabel22.setText("Files");

        jLabel23.setText("Interfaces");

        jLabel24.setText("Queries");

        inpL.setText("0");
        inpL.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                inpLFocusLost(evt);
            }
        });
        inpL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inpLKeyReleased(evt);
            }
        });

        outL.setText("0");
        outL.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                outLFocusLost(evt);
            }
        });
        outL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                outLKeyReleased(evt);
            }
        });

        filL.setText("0");
        filL.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                filLFocusLost(evt);
            }
        });
        filL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                filLKeyReleased(evt);
            }
        });

        intL.setText("0");
        intL.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                intLFocusLost(evt);
            }
        });
        intL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                intLKeyReleased(evt);
            }
        });

        queL.setText("0");
        queL.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                queLFocusLost(evt);
            }
        });
        queL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                queLKeyReleased(evt);
            }
        });

        inpA.setText("0");
        inpA.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                inpAFocusLost(evt);
            }
        });
        inpA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inpAKeyReleased(evt);
            }
        });

        outA.setText("0");
        outA.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                outAFocusLost(evt);
            }
        });
        outA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                outAKeyReleased(evt);
            }
        });

        filA.setText("0");
        filA.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                filAFocusLost(evt);
            }
        });
        filA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                filAKeyReleased(evt);
            }
        });

        intA.setText("0");
        intA.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                intAFocusLost(evt);
            }
        });
        intA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                intAKeyReleased(evt);
            }
        });

        queA.setText("0");
        queA.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                queAFocusLost(evt);
            }
        });
        queA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                queAKeyReleased(evt);
            }
        });

        inpH.setText("0");
        inpH.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                inpHFocusLost(evt);
            }
        });
        inpH.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inpHKeyReleased(evt);
            }
        });

        outH.setText("0");
        outH.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                outHFocusLost(evt);
            }
        });
        outH.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                outHKeyReleased(evt);
            }
        });

        filH.setText("0");
        filH.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                filHFocusLost(evt);
            }
        });
        filH.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                filHKeyReleased(evt);
            }
        });

        intH.setText("0");
        intH.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                intHFocusLost(evt);
            }
        });
        intH.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                intHKeyReleased(evt);
            }
        });

        queH.setText("0");
        queH.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                queHFocusLost(evt);
            }
        });
        queH.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                queHKeyReleased(evt);
            }
        });

        funcPointsBtn.setBackground(new java.awt.Color(102, 255, 102));
        funcPointsBtn.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        funcPointsBtn.setText("OK");
        funcPointsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                funcPointsBtnActionPerformed(evt);
            }
        });

        jLabel25.setText("Number of Function Points");

        manualMultpInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manualMultpInputActionPerformed(evt);
            }
        });

        modifyMultpBtn.setText("Modify");
        modifyMultpBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyMultpBtnActionPerformed(evt);
            }
        });

        jLabel26.setText("Manual Multiplier");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel16)
                                        .addGap(55, 55, 55)
                                        .addComponent(jLabel17))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel20, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel24, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel23, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel22, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel21, javax.swing.GroupLayout.Alignment.LEADING))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 86, Short.MAX_VALUE)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(inpL, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(outL, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(filL, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(intL, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(queL, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(37, 37, 37)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel18)
                                    .addComponent(inpA, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(outA, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(filA, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(intA, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(queA, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(33, 33, 33)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(inpH, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(outH, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(filH, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(intH, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(queH, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel19)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(144, 144, 144)
                                .addComponent(jLabel25))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(168, 168, 168)
                        .addComponent(funcPointsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel26)
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(manualMultpInput, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(modifyMultpBtn))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(langComb, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(multipLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(langComb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(multipLabel))
                .addGap(8, 8, 8)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(manualMultpInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel26)
                    .addComponent(modifyMultpBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel25)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(inpH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(outH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(filH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(intH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(queH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16)
                            .addComponent(jLabel17)
                            .addComponent(jLabel18)
                            .addComponent(jLabel19))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel20)
                                    .addComponent(inpL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel21)
                                    .addComponent(outL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel22)
                                    .addComponent(filL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel23)
                                    .addComponent(intL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel24)
                                    .addComponent(queL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(inpA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(outA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(filA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(intA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(queA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(funcPointsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Function points", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mSlocBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mSlocBtnActionPerformed
        
        String inputSloc = "";
   
        try{
            inputSloc = mSloc.getText();
            int test = Integer.parseInt(inputSloc);
        }
        catch (NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Please enter an integer between 0 and 9999999");
        }
        /* Modification 2017.2
        *  Add more parameters in SLOC pannel to calculate adapted code SLOC in the future
        */
        String aSloc = adaptedSloc.getText();
        String dm = "";
        
        try{
            dm = pDM.getText();
            int test = Integer.parseInt(dm);
        }
        catch (NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Please enter valid DM value.");
        }
        String cm = "";
        
        try{
            cm = pCM.getText();
            int test = Integer.parseInt(cm);
        }
        catch (NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Please enter valid CM value.");
        }
        
        String im = pIM.getText();
        try{
            im = pIM.getText();
            int test = Integer.parseInt(im);
        }
        catch (NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Please enter valid IM value.");
        }
        
        String at = "";
        try{
            at = pAT.getText();
            int test = Integer.parseInt(at);
        }
        catch (NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Please enter valid AT value.");
        }
        
        String aa = aaComboBox.getSelectedItem().toString();
        String su = suComboBox.getSelectedItem().toString();
        String unfm = unfmComboBox.getSelectedItem().toString();
        
        
        
        boolean validInput = !inputSloc.isEmpty() && containsOnlyNumbers(inputSloc) && !aSloc.isEmpty() && containsOnlyNumbers(aSloc)
                && !dm.isEmpty() && containsOnlyNumbers(dm) && !cm.isEmpty() && containsOnlyNumbers(cm) && !im.isEmpty() && containsOnlyNumbers(im)
                && !at.isEmpty() && containsOnlyNumbers(at);
        if (validInput) {

            int sloc = Integer.parseInt(inputSloc);
            int asloc = Integer.parseInt(aSloc);
            int nDM = Integer.parseInt(dm);
            int nCM = Integer.parseInt(cm);
            int nIM = Integer.parseInt(im);
            int nAT = Integer.parseInt(at);
            
            int nAA = Integer.parseInt(aa);
            double nUNFM = Double.parseDouble(unfm);
            int nSU = -1;
            switch (su){
                case "NOM": 
                    nSU = 30;
                    break;
                case "VLOW":
                    nSU = 50;
                    break;
                case "LOW":
                    nSU = 40;
                    break;
                case "HIGH":
                    nSU = 20;
                    break;
                case "VHIGH":
                    nSU = 10;
                    break;
            }

            if (sloc < 0) {
                JOptionPane.showMessageDialog(null, "Value entered is -ve, please re-enter sloc");
                mSloc.setText("");
            /*} else if (sloc < 2000 || sloc == 0) {
                JOptionPane.showMessageDialog(null, "Calibration done for SLOC above 2000, Please re-enter");
                mSloc.setText("");*/
            } else if (asloc < 0) {
                JOptionPane.showMessageDialog(null, "Value entered is -ve, please re-enter adapted code sloc");
                adaptedSloc.setText("0");
            } else if (nDM < 0 || nDM > 100) {
                JOptionPane.showMessageDialog(null, "DM should be 0 to 100");
                pDM.setText("0");
            } else if (nCM < 0 || nCM > 100) {
                JOptionPane.showMessageDialog(null, "CM should be 0 to 100");
                pCM.setText("0");
            } else if (nIM < 0 || nIM > 100) {
                JOptionPane.showMessageDialog(null, "IM should be 0 to 100");
                pIM.setText("0");
            }else if (nAT < 0 || nAT > 100) {
                JOptionPane.showMessageDialog(null, "AT should be 0 to 100");
                pAT.setText("0");
            }else {
                /* Modification 2017.2
                 * Calculate adapted SLOC
                 */
                int esloc = sloc;
                if (asloc > 0) {
                   double aaf = (0.4*(double)nDM) + (0.3*(double)nCM) + (0.3*(double)nIM);
                   double aam = 0;
                   if (aaf <= 50) {
                       aam = (nAA + aaf*(1 + (0.02*(double)nSU*(double)nUNFM))) / 100;
                   }else {
                       aam = (nAA + aaf + ((double)nSU*(double)nUNFM)) / 100;
                   }
                   esloc += asloc*(1-(double)nAT/100)*aam;
                }
                if(esloc >= 2000 && esloc <= 9999999) {
                    this.cocoDash.setSloc(String.valueOf(esloc));
                    this.setVisible(false);
                } else if (esloc < 2000) {
                    JOptionPane.showMessageDialog(null, "Calibration done for SLOC above 2000, now is "+esloc+". Please re-enter");
                } else {
                    JOptionPane.showMessageDialog(null, "SLOC above 9999999. Please re-enter");
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Invalid input, please re-enter");
        }
    }//GEN-LAST:event_mSlocBtnActionPerformed

    private void funcPointsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_funcPointsBtnActionPerformed
        // TODO add your handling code here:
        int[][] fpInputs = new int[5][3];
        fpInputs[0][0] = Integer.valueOf(inpL.getText());
        fpInputs[0][1] = Integer.valueOf(inpA.getText());
        fpInputs[0][2] = Integer.valueOf(inpH.getText());
        
        fpInputs[1][0] = Integer.valueOf(outL.getText());
        fpInputs[1][1] = Integer.valueOf(outA.getText());
        fpInputs[1][2] = Integer.valueOf(outH.getText());
        
        fpInputs[2][0] = Integer.valueOf(filL.getText());
        fpInputs[2][1] = Integer.valueOf(filA.getText());
        fpInputs[2][2] = Integer.valueOf(filH.getText());
        
        fpInputs[3][0] = Integer.valueOf(intL.getText());
        fpInputs[3][1] = Integer.valueOf(intA.getText());
        fpInputs[3][2] = Integer.valueOf(intH.getText());
        
        fpInputs[4][0] = Integer.valueOf(queL.getText());
        fpInputs[4][1] = Integer.valueOf(queA.getText());
        fpInputs[4][2] = Integer.valueOf(queH.getText());
        
        int fpCount = 0;
        for (int i=0; i<5; ++i) {
            for (int j=0; j<3; ++j) {
                fpCount += (this.cocoDash.fpd.fpFactors[i][j] * fpInputs[i][j]);
            }
        }
        int fpSLOC = Integer.valueOf(multipLabel.getText()) * fpCount;
        
        if (fpSLOC<2000) {
            JOptionPane.showMessageDialog(null, "Calibration done for SLOC above 2000, now is "+fpSLOC+". Please re-enter");
        } else {
            this.cocoDash.setSloc(String.valueOf(fpSLOC));
            this.setVisible(false);
        }
    }//GEN-LAST:event_funcPointsBtnActionPerformed

    private void langCombActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_langCombActionPerformed
        // TODO add your handling code here:
        multipLabel.setText(Integer.toString(langMult[langComb.getSelectedIndex()]));
    }//GEN-LAST:event_langCombActionPerformed

    private void modifyMultpBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyMultpBtnActionPerformed
        // TODO add your handling code here:
        String mMinput = manualMultpInput.getText();
        if(!mMinput.isEmpty() && containsOnlyNumbers(mMinput)) {
            int manulM = Integer.valueOf(manualMultpInput.getText());
            if (manulM>=0 && manulM<=1000) {
                multipLabel.setText(Integer.toString(manulM));
            } else {
                JOptionPane.showMessageDialog(null, "Please enter an integer between 0 and 1000");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please enter an integer between 0 and 1000");
        }
        manualMultpInput.setText("");
    }//GEN-LAST:event_modifyMultpBtnActionPerformed

    private void manualMultpInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manualMultpInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_manualMultpInputActionPerformed

    private void inpAFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_inpAFocusLost
        // TODO add your handling code here:
        String s = inpA.getText();
        if (s.isEmpty()){
            inpA.setText("0");
        }
    }//GEN-LAST:event_inpAFocusLost

    private void inpAKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inpAKeyReleased
        // TODO add your handling code here:
        String s = inpA.getText();
        if(!s.isEmpty() && !this.between0and999(s)){
            JOptionPane.showMessageDialog(null, "Please enter an integer between 0 and 1000");
            inpA.setText("0");
        }
    }//GEN-LAST:event_inpAKeyReleased

    private void inpLFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_inpLFocusLost
        // TODO add your handling code here:
        String s = inpL.getText();
        if (s.isEmpty()){
            inpL.setText("0");
        }
    }//GEN-LAST:event_inpLFocusLost

    private void inpLKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inpLKeyReleased
        // TODO add your handling code here:
        String s = inpL.getText();
        if(!s.isEmpty() && !this.between0and999(s)){
            JOptionPane.showMessageDialog(null, "Please enter an integer between 0 and 1000");
            inpL.setText("0");
        }
    }//GEN-LAST:event_inpLKeyReleased

    private void inpHFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_inpHFocusLost
        // TODO add your handling code here:
        String s = inpH.getText();
        if (s.isEmpty()){
            inpH.setText("0");
        }
    }//GEN-LAST:event_inpHFocusLost

    private void inpHKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inpHKeyReleased
        // TODO add your handling code here:
        String s = inpH.getText();
        if(!s.isEmpty() && !this.between0and999(s)){
            JOptionPane.showMessageDialog(null, "Please enter an integer between 0 and 1000");
            inpH.setText("0");
        }
    }//GEN-LAST:event_inpHKeyReleased

    private void outLFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_outLFocusLost
        // TODO add your handling code here:
        String s = outL.getText();
        if (s.isEmpty()){
            outL.setText("0");
        }
    }//GEN-LAST:event_outLFocusLost

    private void outLKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_outLKeyReleased
        // TODO add your handling code here:
        String s = outL.getText();
        if(!s.isEmpty() && !this.between0and999(s)){
            JOptionPane.showMessageDialog(null, "Please enter an integer between 0 and 1000");
            outL.setText("0");
        }
    }//GEN-LAST:event_outLKeyReleased

    private void outAFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_outAFocusLost
        // TODO add your handling code here:
        String s = outA.getText();
        if (s.isEmpty()){
            outA.setText("0");
        }
    }//GEN-LAST:event_outAFocusLost

    private void outAKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_outAKeyReleased
        // TODO add your handling code here:
        String s = outA.getText();
        if(!s.isEmpty() && !this.between0and999(s)){
            JOptionPane.showMessageDialog(null, "Please enter an integer between 0 and 1000");
            outA.setText("0");
        }
    }//GEN-LAST:event_outAKeyReleased

    private void outHFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_outHFocusLost
        // TODO add your handling code here:
        String s = outH.getText();
        if (s.isEmpty()){
            outH.setText("0");
        }
    }//GEN-LAST:event_outHFocusLost

    private void outHKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_outHKeyReleased
        // TODO add your handling code here:
        String s = outH.getText();
        if(!s.isEmpty() && !this.between0and999(s)){
            JOptionPane.showMessageDialog(null, "Please enter an integer between 0 and 1000");
            outH.setText("0");
        }
    }//GEN-LAST:event_outHKeyReleased

    private void filLFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_filLFocusLost
        // TODO add your handling code here:
        String s = filL.getText();
        if (s.isEmpty()){
            filL.setText("0");
        }
    }//GEN-LAST:event_filLFocusLost

    private void filLKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filLKeyReleased
        // TODO add your handling code here:
        String s = filL.getText();
        if(!s.isEmpty() && !this.between0and999(s)){
            JOptionPane.showMessageDialog(null, "Please enter an integer between 0 and 1000");
            filL.setText("0");
        }
    }//GEN-LAST:event_filLKeyReleased

    private void filAFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_filAFocusLost
        // TODO add your handling code here:
        String s = filA.getText();
        if (s.isEmpty()){
            filA.setText("0");
        }
    }//GEN-LAST:event_filAFocusLost

    private void filAKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filAKeyReleased
        // TODO add your handling code here:
        String s = filA.getText();
        if(!s.isEmpty() && !this.between0and999(s)){
            JOptionPane.showMessageDialog(null, "Please enter an integer between 0 and 1000");
            filA.setText("0");
        }
    }//GEN-LAST:event_filAKeyReleased

    private void filHFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_filHFocusLost
        // TODO add your handling code here:
        String s = filH.getText();
        if (s.isEmpty()){
            filH.setText("0");
        }
    }//GEN-LAST:event_filHFocusLost

    private void filHKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filHKeyReleased
        // TODO add your handling code here:
        String s = filH.getText();
        if(!s.isEmpty() && !this.between0and999(s)){
            JOptionPane.showMessageDialog(null, "Please enter an integer between 0 and 1000");
            filH.setText("0");
        }
    }//GEN-LAST:event_filHKeyReleased

    private void intLFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_intLFocusLost
        // TODO add your handling code here:
        String s = intL.getText();
        if (s.isEmpty()){
            intL.setText("0");
        }
    }//GEN-LAST:event_intLFocusLost

    private void intLKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_intLKeyReleased
        // TODO add your handling code here:
        String s = intL.getText();
        if(!s.isEmpty() && !this.between0and999(s)){
            JOptionPane.showMessageDialog(null, "Please enter an integer between 0 and 1000");
            intL.setText("0");
        }
    }//GEN-LAST:event_intLKeyReleased

    private void intAFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_intAFocusLost
        // TODO add your handling code here:
        String s = intA.getText();
        if (s.isEmpty()){
            intA.setText("0");
        }
    }//GEN-LAST:event_intAFocusLost

    private void intAKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_intAKeyReleased
        // TODO add your handling code here:
        String s = intA.getText();
        if(!s.isEmpty() && !this.between0and999(s)){
            JOptionPane.showMessageDialog(null, "Please enter an integer between 0 and 1000");
            intA.setText("0");
        }
    }//GEN-LAST:event_intAKeyReleased

    private void intHFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_intHFocusLost
        // TODO add your handling code here:
        String s = intH.getText();
        if (s.isEmpty()){
            intH.setText("0");
        }
    }//GEN-LAST:event_intHFocusLost

    private void intHKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_intHKeyReleased
        // TODO add your handling code here:
        String s = intH.getText();
        if(!s.isEmpty() && !this.between0and999(s)){
            JOptionPane.showMessageDialog(null, "Please enter an integer between 0 and 1000");
            intH.setText("0");
        }
    }//GEN-LAST:event_intHKeyReleased

    private void queLFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_queLFocusLost
        // TODO add your handling code here:
        String s = queL.getText();
        if (s.isEmpty()){
            queL.setText("0");
        }
    }//GEN-LAST:event_queLFocusLost

    private void queLKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_queLKeyReleased
        // TODO add your handling code here:
        String s = queL.getText();
        if(!s.isEmpty() && !this.between0and999(s)){
            JOptionPane.showMessageDialog(null, "Please enter an integer between 0 and 1000");
            queL.setText("0");
        }
    }//GEN-LAST:event_queLKeyReleased

    private void queAFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_queAFocusLost
        // TODO add your handling code here:
        String s = queA.getText();
        if (s.isEmpty()){
            queA.setText("0");
        }
    }//GEN-LAST:event_queAFocusLost

    private void queAKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_queAKeyReleased
        // TODO add your handling code here:
        String s = queA.getText();
        if(!s.isEmpty() && !this.between0and999(s)){
            JOptionPane.showMessageDialog(null, "Please enter an integer between 0 and 1000");
            queA.setText("0");
        }
    }//GEN-LAST:event_queAKeyReleased

    private void queHFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_queHFocusLost
        // TODO add your handling code here:
        String s = queH.getText();
        if (s.isEmpty()){
            queH.setText("0");
        }
    }//GEN-LAST:event_queHFocusLost

    private void queHKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_queHKeyReleased
        // TODO add your handling code here:
        String s = queH.getText();
        if(!s.isEmpty() && !this.between0and999(s)){
            JOptionPane.showMessageDialog(null, "Please enter an integer between 0 and 1000");
            queH.setText("0");
        }
    }//GEN-LAST:event_queHKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Sloc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Sloc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Sloc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Sloc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Sloc dialog = new Sloc(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    public static boolean containsOnlyNumbers(String str) {
        for (int i = 0; i < str.length(); i++) {
            if (!Character.isDigit(str.charAt(i))) {
                return false;
            }
        }
        return true;
    }
    
    public static boolean between0and999(String str) {
        if (str.isEmpty() || !containsOnlyNumbers(str)) {
            return false;
        }
        int i = Integer.valueOf(str);
        if (i>=0 && i<=999) {
            return true;
        }
        return false;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> aaComboBox;
    private javax.swing.JTextField adaptedSloc;
    private javax.swing.JTextField filA;
    private javax.swing.JTextField filH;
    private javax.swing.JTextField filL;
    private javax.swing.JButton funcPointsBtn;
    private javax.swing.JTextField inpA;
    private javax.swing.JTextField inpH;
    private javax.swing.JTextField inpL;
    private javax.swing.JTextField intA;
    private javax.swing.JTextField intH;
    private javax.swing.JTextField intL;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JComboBox<String> langComb;
    private javax.swing.JTextField mSloc;
    private javax.swing.JButton mSlocBtn;
    private javax.swing.JTextField manualMultpInput;
    private javax.swing.JButton modifyMultpBtn;
    private javax.swing.JLabel multipLabel;
    private javax.swing.JTextField outA;
    private javax.swing.JTextField outH;
    private javax.swing.JTextField outL;
    private javax.swing.JTextField pAT;
    private javax.swing.JTextField pCM;
    private javax.swing.JTextField pDM;
    private javax.swing.JTextField pIM;
    private javax.swing.JTextField queA;
    private javax.swing.JTextField queH;
    private javax.swing.JTextField queL;
    private javax.swing.JComboBox<String> suComboBox;
    private javax.swing.JComboBox<String> unfmComboBox;
    // End of variables declaration//GEN-END:variables
}
